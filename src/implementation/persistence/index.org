#+TITLE: Data Model of the User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Initialization

** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
# -*- coding: utf-8 -*-

from collections import OrderedDict

from flask.ext.sqlalchemy import SQLAlchemy
from flask import current_app, request
from sqlalchemy.orm import relationship
import sqlalchemy.types as types

import os
import re
from urlparse import urlparse
from datetime import datetime
import json
import copy

from op_exceptions import AttributeRequired,ConstraintError
from utils import *


db = SQLAlchemy()


# Abstract class to hold common methods
class Entity(db.Model):

    __abstract__ = True

    # save a db.Model to the database. commit it.
    def save(self):
        db.session.add(self)
        db.session.commit()

    # update the object, and commit to the database
    def update(self, **kwargs):
        for attr, val in kwargs.iteritems():
            setter_method = "set_" + attr
            try:
                self.__getattribute__(setter_method)(val)
            except Exception as e:
                raise e

        self.save()

    #print "Setting new val"
    #print "Calling %s on %s" % (method_to_set, curr_entity)
    #try:
    #    getattr(record, method_to_set)(new_val)
    #except Exception as e:
    #pass

    def delete(self):
        db.session.delete(self)
        db.session.commit()

#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired
from src.op_exceptions import ConstraintError

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC



** Imports for utility functions
   
#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

from flask import make_response, current_app

import re


#+END_SRC


* Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



*** Other function for REST

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

# return a list of dicts as json with correct mime types
# flask does not provide a jsonify for lists; hence this method
def jsonify_list(data):
    if type(data) is not list:
        raise Exception('jsonify_list function accepts only a list')

    return make_response(json.dumps(data), 200,
                         {'content-type': 'application/json'})


# take in a flask request object and try to parse out a dictionary from the
# request
# try to find if request is as JSON first, then look into forms, finally force
# find it.
# If not found return a dict; else return the parsed data
def parse_request(request):
    if request.json:
        # print 'found in request.json'
        data = request.get_json()

    elif request.data:
        # print 'found in request.data'
        data = json.loads(request.data)

    elif request.form:
        # print 'found in request.form'
        data = request.form.to_dict()
        # try to detect if form contains integers and boolean data and attempt
        # to convert them
        # FIXME: is this a good idea? Fix this to do it in a better way?
        for k in data:
            if is_number(data[k]):
                data[k] = int(data[k])
            if is_bool_in_str(data[k]):
                data[k] = str_to_bool(data[k])

            # print k, data[k]

    else:
        data = request.get_json(force=True)

    if not data:
        return False

    return data


# check if a given string is a number
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


# check if in a given string python bool types are represented
def is_bool_in_str(s):
    if s == "True" or s == "False":
        return True
    return False


# convert python bool types in string to native bool types
def str_to_bool(s):
    if s == "True":
        return True
    if s == "False":
        return False
    return None
#+END_SRC


* Object Relational Model

** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if not is_email(value):
            raise TypeError('%s is not an email!' % value)
        self.value = value

    def __str__(self):
        return self.value
#+END_SRC



*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_email_type(self):
        print "test_email_type"
        new_email = Email("smith@gmail.com")
        # correct name
        self.assertEqual(new_email.value, "smith@gmail.com")
        # incorrect name
        self.assertRaises(TypeError, Email, "@@@@smithgmail.com")
#+END_SRC



*** Functions


**** getEmail
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_email(self):
        return self.value
#+END_SRC



** User

*** Immutable Data
     This is the data associated with Institute type, which is immutable.

     + Id


*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class User(Entity):

    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))
    name = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(128), nullable=False, unique=True)

#+END_SRC


*** Constructor

**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=<object of Role>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self, **kwargs):
        if 'email' not in kwargs:
            raise AttributeRequired("email is mandatory")

        if 'name' not in kwargs:
            raise AttributeRequired("name is mandatory")

        if 'role' not in kwargs:
            raise AttributeRequired("Atleast one role is mandatory")

        self.set_email(kwargs['email'])
        self.set_name(kwargs['name'])
        self.set_role(kwargs['role'])
#+END_SRC


**** Test the constructor

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_user_creation_without_role(self):
        print "test_user_creation_without_role"
        with self.assertRaises(AttributeRequired):
            user = User(name=Name("Robin Smith"), 
                            email=Email("smith@gmail.com"))

    def test_user_creation_with_role(self):
        print "test_user_creation_with_role"
        role = Role(name=Name("admin"))
        role.save()
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role.get_by_id(1))
        user.save()
        self.assertEqual(user.role.name, "admin")   
 #+END_SRC


*** Functions


**** setRole User, Role ---> NIL

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_role(self, role):
        if not isinstance(role, Role):
            raise TypeError('`role` argument should be of type Role.')
        else:
            self.role = role
#+END_SRC

***** Test setRole to a user 
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_set_toles_to_user(self):
        print "test_set_toles_to_user"
        role = Role(name=Name("admin"))
        role.save()
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role.get_by_id(1))
        user.save()
        role = Role(name=Name("user"))
        user.set_role(role)
        user.save()
        users = User.get_all()
        self.assertEqual(users[0].role.name, "user")
#+END_SRC


**** setEmail
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_email(self, email):
        if not isinstance(email, Email):
            raise TypeError('`email` argument should be of type Email.')
        else:
            self.email = email.value
#+END_SRC


**** setName
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_name(self, name):
        if not isinstance(name, Name):
            raise TypeError('`name` argument should be of type Name.')
        else:
            self.name = name.value
#+END_SRC

**** setRole
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_role(self, role):
        if not isinstance(role, Role):
            raise TypeError('`role` argument should be of type Role.')
        else:
            self.role = role
#+END_SRC

**** getRole
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_role(self):
        return self.role
#+END_SRC




**** getEmail
 #+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_email(self):
        return self.email
 #+END_SRC


**** getName
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC


**** getAll: Nil --> set[User]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_all():
        return User.query.all()
#+END_SRC


***** Test getAll
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_user_get_all(self):
        print "test_user_get_all"
        role = Role(name=Name("Admin"))
        role.save()
        user = User(name=Name("Termite"), 
                    email=Email("tremite@gmail.com"),
                    role=role)
        user.save()
        users = User.get_all()
        self.assertEqual("Admin", users[0].role.name)
#+END_SRC


**** getById : id --> User

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return User.query.get(id)
#+END_SRC


***** Test getById: Id --> User
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_user_by_id(self):
        print "test_get_user_by_id"
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role(name=Name("admin")))
        user.save()
        self.assertEqual(user.get_by_id(1).role.name, "admin")
        self.assertEqual(user.get_by_id(1).name, "Robin Smith")
#+END_SRC

***** Test updateRole: Role -> Role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_update_user(self):
        print "test_update_role"
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role(name=Name("admin")))
        user.save()
        u1 = User.get_by_id(1)

        u1.update(name=Name("Duddley Rod"), 
                  email=Email("duddley@gmail.com"),
                  role=Role(name=Name("owner")))

        self.assertEqual(u1.get_by_id(1).name, "Duddley Rod")
        self.assertEqual(u1.get_by_id(1).role.name, "owner")
#+END_SRC


**** toClient
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'email': self.email,
            'role': self.role.to_client()
        }
#+END_SRC



** Role
   
*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Owner  :: An owner is user an admin who cannot delete himself
   - Admin :: An admin is an user who can add, modify and delete other users
        except owner
   - User :: A User is a user who can view all other users and either modify or
        delete himself.
   - Guest :: A Guest is a user who can view all other users


*** Immutable Data
     This is the data associated with Institute type, which is immutable.

     + Id


*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Role(Entity):
    __tablename__ = 'roles'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), unique=True, nullable=False)
    users = db.relationship('User', backref='role')
#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("name is mandatory")

        self.set_name(kwargs['name'])
#+END_SRC


*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_role_creation(self):
        print "test_role_creation"
        role = Role(name=Name("admin"))
        role.save()
        self.assertEqual(role.name, "admin")
#+END_SRC


*** Functions

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_name(self, name):
        if not isinstance(name, Name):
            raise TypeError('`name` argument should be of type Name.')
        else:
            self.name = name.value
#+END_SRC

****** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_role_set_name(self):
        print "test_role_set_name"
        role = Role(name=Name("admin"))
        role.save()
        role.set_name(Name("owner"))
        role.save()
        role = Role.get_by_id(1)
        self.assertEqual(role.name, "owner")
#+END_SRC


**** setUsers Role, Users ---> NIL

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_users(self, users):
        type_error = False
        for user in users:
            if not isinstance(user, User):
                type_error = True
                break

        if not type_error:
            self.users = users
        else:
            raise TypeError('`user` argument should be of type User.')
#+END_SRC

***** Test setUsers to a role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_set_users_to_role(self):
        print "test_set_users_to_role"
#+END_SRC


**** getName

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC


**** getUsers Role ---> set of Users
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_users(self):
        return self.users
#+END_SRC


**** getId

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_id(self):
        return self.id
#+END_SRC


**** getById : id --> Role

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return Role.query.get(id)
#+END_SRC


***** Test getById: Id --> Role
 #+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_role_by_id(self):
        print "test_get_role_by_id"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual(role.get_by_id(1).name, "Admin")

 #+END_SRC


***** Test updateRole: Role -> Role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_update_role(self):
        print "test_update_role"
        role = Role(name=Name("Admin"))
        role.save()
        rl = Role.get_by_id(1)
        rl.update(name=Name("owner"))
        self.assertEqual(rl.get_by_id(1).name, "owner")
#+END_SRC


**** getAll: Nil --> set[Role]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_all():
        return Role.query.all()
#+END_SRC


***** Test getAll: Nil --> set[Role]
 #+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all"
        role = Role(name=Name("Admin"))
        role.save()
        roles = Role.get_all()
        self.assertEqual("Admin", roles[0].name)
 #+END_SRC


**** to_client
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name
        }

#+END_SRC




** Session

*** Introduction
    Session is used to maintain the login status of the user.

*** Immutable Data
     This is the data associated with Institute type, which is immutable.

     + user


*** Mutable Data

     These are the data associated with User type, which are mutable

     + 


*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Session():
    user = None
#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    session_instance = session(user)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self, user):
        if not isinstance(user,User):
            raise AttributeRequired("user instance not passed")
        else :
            self.user = user;
#+END_SRC


*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestSession(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_session_creation(self):
        print "session creation testing"
        role = Role(name=Name('admin'))
        role.save()
        user = User(name = Name('johns'),email = Email('johnsn@gmail.com'), role = Role.get_by_id(1));
        user.save()
        sess = Session(user);
        self.assertEqual(sess.get_user(),user);
#+END_SRC


*** Functions

**** get_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_user(self):
        return self.user
#+END_SRC


** System

*** Introduction
    
    System class has all the system functions like get user, set user
    delete user.

    
*** Mutable Data

     These are the data associated with Role type, which are mutable
     

     
*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class System():
    users = []
    session_list = []
#+END_SRC

*** Constructor
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__ (self):
        self.users = []
        self.session_list = []
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no

class TestSystem(TestCase):
    
    from src.db import sys

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        ar = Role(name = Name('admin'))
        ur = Role(name = Name('user'))
        ar.save()
        ur.save()
        user1 = User(name= Name('john'), email= Email('john@gmail.com') , role= Role.get_by_id(1) )
        user2 = User(name= Name('johnsnow'), email = Email('johnsnow@gmail.com') , role =Role.get_by_id(2) )
        user1.save()
        user2.save()
        sessi = Session(user1)
        sessi1 = Session(user2)
        global sys
        sys.users.append(user1)
        sys.session_list.append(sessi)
        sys.users.append(user2)
        sys.session_list.append(sessi1)


    def tearDown(self):
        db.session.remove()
        db.drop_all()
        global sys
        sys.session_list = []
        sys.users = []

#+END_SRC


*** Functions

**** adduser
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def add_user(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if session.get_user().get_role()==Role.get_by_id(1) and session in self.session_list:
                if user.get_email() not in [self.users[i].get_email() for i in range(0,len(self.users))]:
                    self.users.append(user)
                    return
                else :
                    raise ConstraintError ('User already exists')
                    return False
            else :
                raise ConstraintError ('User must be admin and logged to add a new user')
                return False
        else:
            raise ConstraintError ('instances of user and session must be passed')            
            return False

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_adduser(self):
        print 'testing System: adduser'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
#        list_t = User.get_all()
#        for i in range(0,len(list_t)):
#            print list_t[i].email
        with self.assertRaises(ConstraintError): # trying to add same user
            sys.add_user(normal_logged[0].get_user(),admin_logged[0])
        with self.assertRaises(ConstraintError): # normal uesr trying to add user
            user2  = User(name= Name('raj'), email= Email('raj@gmail.com') , role = Role.get_by_id(1))
            user2.save();
            sys.add_user(user2,normal_logged[0])
        with self.assertRaises(ConstraintError): # proper instances not passed
            user2 = User(name= Name('rajman'), email= Email('rajman@gmail.com') , role = Role.get_by_id(2))
            user2.save()
            sys.add_user(admin_logged[0],user2)

        
#+END_SRC


**** add_users_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def add_users_client(self,user,mail_id):
        logged_in_list = [s for s in self.session_list if s.get_user().get_email()==mail_id]      

        if len(logged_in_list)==0:
            raise ConstraintError('session not present')
        else :
            self.add_user(user,logged_in_list[0])
#+END_SRC



**** showUsers
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def show_users(self,session):
        if isinstance(session,Session):
            if session in self.session_list :
                return copy.deepcopy(self.users)
            else :
                raise ConstraintError('Session not in session list')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_showusers(self):
        print 'testing System: show_users'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
      
        a = sys.show_users(admin_logged[0])
        for i in range(0,len(a)):
            self.assertEqual(str(a[i].get_email()),str(sys.users[i].get_email()))
            self.assertEqual(str(a[i].get_name()),str(sys.users[i].get_name()))

#+END_SRC



**** get_users_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def get_users_client(self,mail_id):
        logged_in_list = [s for s in self.session_list if s.get_user().get_email()==mail_id]
       
        if len(logged_in_list)==0:
            raise ConstraintError('session not present')
        else :
            return ([i.to_client() for i in self.users])
#+END_SRC


**** deluser
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no

    def del_user(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if session.get_user().get_role()==Role.get_by_id(1) and user.get_role()!=Role.get_by_id(1) and session.get_user()!=user:
                 if user in self.users and session in self.session_list :
                    self.users.remove(user)
                 else :
                    raise ConstraintError('user not in list or session not present')
            else :
                raise ConstraintError('only admin can delete and admin cannot be removed')
        else:
            raise ConstraintError ('Instance of user and session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_deluser(self):
        print 'testing System: del_users'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        with self.assertRaises(ConstraintError): # normal user trying to delete user
            user2 = User(name= Name('raj'), email= Email('raj@gmail.com') , role= Role.get_by_id(2) )
            user2.save()
            sys.users.append(user2)
            sys.del_user(user2,normal_logged[0])
        with self.assertRaises(ConstraintError): # you cannot delete an admin
            user3 = User(name= Name('raja'), email= Email('raja@gmail.com') , role= Role.get_by_id(1)) 
            user3.save()
            sys.users.append(user3)
            sys.del_user(user3,admin_logged[0])
        with self.assertRaises(ConstraintError): # cannot delete oneself
            sys.del_user(admin_logged[0].get_user(),admin_logged[0])

#+END_SRC


**** del_users_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def del_users_client(self,record,mail_id):
        logged_in_list = [s for s in self.session_list if s.get_user().get_email()==mail_id]
        if len(logged_in_list)==0:
            raise ConstraintError('session not present')
        else :
            self.del_user(record,logged_in_list[0])
#+END_SRC


**** getuserbyemail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
 
    def getUserByEmail(self,email,session):
        if isinstance(session,Session) and isinstance(email,Email):
            if session in self.session_list:
                return [user for user in self.users if user.get_email()==email.value]
            else :
                raise ConstraintError('session not valid')
        else:
            raise ConstraintError ('Instance of Email and session not passed')     

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_getuserbyemail(self):
        print 'testing System: get_user by email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        a = sys.getUserByEmail(Email('john@gmail.com'),admin_logged[0])
        self.assertEqual(a[0].get_name(),'john')
        self.assertEqual(len(a),1)
        self.assertEqual(a[0].get_email(),'john@gmail.com')

#+END_SRC


**** getEmail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no

    def get_email(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if user in self.users and session in self.session_list:
                return [u.get_email() for u in self.users if u==user][0]
            else :
                raise ConstraintError('user doesnot exists or invalid session')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_getemail(self):
        print 'testing System: get_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        a = sys.get_email(normal_logged[0].get_user(),admin_logged[0])
        self.assertEqual(a,'johnsnow@gmail.com')

#+END_SRC


**** getName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
 
    def get_name(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if user in self.users and session in self.session_list:
                return [u.get_name() for u in self.users if u==user][0]
            else :
                raise ConstraintError('user doesnot exists or invalid session')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_getname(self):
        print 'testing System: get_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        a = sys.get_name(normal_logged[0].get_user(),admin_logged[0])
        self.assertEqual(a,'johnsnow')

#+END_SRC


**** getrole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no

    def get_role(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if user in self.users and session in self.session_list:
                return [u.get_role() for u in self.users if u==user][0]
            else :
                raise ConstraintError('user doesnot exists or invalid session')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_getemail(self):
        print 'testing System: get_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        a = sys.get_role(admin_logged[0].get_user(),admin_logged[0])
        self.assertEqual(a,Role.get_by_id(1))

#+END_SRC


**** setEmail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no

    def set_email(self,user,email,session):
        print 'set_email called here'
        if isinstance(user,User) and isinstance(session,Session) and isinstance(email,Email):
            if session.user.get_role()==Role.get_by_id(1) or session.user==user:
               if user in self.users and session in self.session_list:
                   for i in range(0,len(self.users)):
                       if self.users[i] == user:
                           user.set_email(email)
                           user.update()
                           self.users[i] = user
               else :
                   raise ConstraintError('user not existing or session expired')
            else :
                raise ConstraintError('Only admin of same user can edit the email')
        else :
            raise ConstraintError ('Proper instances of user,email, session not passed')

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_setemail(self):
        print 'testing System: set_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        sys.set_email(normal_logged[0].get_user(),Email('johnraj@gmail.com'),admin_logged[0]) # admin changing
        self.assertEqual(normal_logged[0].get_user().get_email(),'johnraj@gmail.com')
        self.assertEqual(sys.getUserByEmail(Email('johnraj@gmail.com'),admin_logged[0])[0],normal_logged[0].get_user())
        sys.set_email(normal_logged[0].get_user(),Email('johnsnow@gmail.com'),admin_logged[0]) # user changing bakc
        self.assertEqual(normal_logged[0].get_user().get_email(),'johnsnow@gmail.com')
        self.assertEqual(sys.getUserByEmail(Email('johnsnow@gmail.com'),admin_logged[0])[0],normal_logged[0].get_user())


#+END_SRC


**** set_email_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def set_email_client(self,user,new_email,mail_id):
        logged_in_list = [s for s in self.session_list if s.get_user().get_email()==mail_id]
        print len(logged_in_list)
        if len(logged_in_list)==0:
            raise ConstraintError('session not present')
        else :
            self.set_email(user,Email(new_mail),logged_in_list[0])
#+END_SRC


**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
 
    def set_name(self,user,name,session):
        if isinstance(user,User) and isinstance(session,Session) and isinstance(name,Name):
            if session.user.get_role()==Role.get_by_id(1) or session.user==user:
               if user in self.users and session in self.session_list:
                   for i in range(0,len(self.users)):
                       if self.users[i] == user:
                           user.set_name(name)
                           user.update()
                           self.users[i] = user
               else :
                   raise ConstraintError('user not existing or session expired')
            else :
                raise ConstraintError('Only admin of same user can edit the email')
        else :
            raise ConstraintError ('Proper instances of user,email, session not passed')

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_setname(self):
        print 'testing System: set_name'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        sys.set_name(normal_logged[0].get_user(),Name('johnraj'),admin_logged[0]) # admin changing
        self.assertEqual(normal_logged[0].get_user().get_name(),'johnraj')
        sys.set_name(normal_logged[0].get_user(),Name('johnsnow'),normal_logged[0]) # user changing bakc
        self.assertEqual(normal_logged[0].get_user().get_name(),'johnsnow')

#+END_SRC


**** set_name_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def set_name_client(self,user,new_name,mail_id):
        logged_in_list = [s for s in self.session_list if s.get_user().get_email()==mail_id]
        if len(logged_in_list)==0:
            raise ConstraintError('session not present')
        else :
            self.set_name(user,Name(new_name),logged_in_list[0])
#+END_SRC


**** update_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no

    def update_user(self,user,email,name,session):
        print 'update_user called here'
        if isinstance(user,User) and isinstance(session,Session) and isinstance(email,Email) and isinstance(name,Name):
            if session.user.get_role()==Role.get_by_id(1) or session.user==user:
               if user in self.users and session in self.session_list:
                   for i in range(0,len(self.users)):
                       if self.users[i] == user:
                           user.set_email(email)
                           user.set_name(name)
                           user.update()
                           self.users[i] = user
               else :
                   raise ConstraintError('user not existing or session expired')
            else :
                raise ConstraintError('Only admin of same user can edit the email')
        else :
            raise ConstraintError ('Proper instances of user,email, session not passed')

#+END_SRC



**** update_user_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
  
    def update_user_client(self,user,new_name,new_email,mail_id):
        logged_in_list = [s for s in self.session_list if s.get_user().get_email()==mail_id]

        if len(logged_in_list)==0:
            raise ConstraintError('session not present')
        else :
            self.update_user(user,Email(new_email),Name(new_name),logged_in_list[0])
#+END_SRC


**** showsessions
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no

    def showSessions(self,session):
        if  isinstance(session,Session):
            if session in self.session_list:
               if session.get_user().get_role() == Role.get_by_id(1):
                   return self.session_list[:]
               else :
                   raise ConstraintError('only admin can get session list')
            else :
                raise ConstraintError('session expired')
        else :
            raise ConstraintError ('instance of session class has to be passed')

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_showsessions(self):
        print 'testing System: show session'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(1)]
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()==Role.get_by_id(2)]
        with self.assertRaises(ConstraintError):
            a = sys.showSessions(normal_logged[0])
        b = sys.showSessions(admin_logged[0])
        for i in range(0,len(b)):
            self.assertEqual(str(b[i].get_user().get_email()),str(sys.session_list[i].get_user().get_email()))
            self.assertEqual(str(b[i].get_user().get_name()),str(sys.session_list[i].get_user().get_name()))
            self.assertEqual(str(b[i].get_user().get_role()),str(sys.session_list[i].get_user().get_role()))

#+END_SRC


#+BEGIN_SRC python :tangle ../../src/db.py :eval no
sys = System()
#+END_SRC

** Main
   
*** Construction

     the main class containing login and delete session

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
#+END_SRC




*** Functions
    
**** login
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
def login(user,sys):
    
    if isinstance(user,User) and isinstance(sys,System):
        sessi = Session(user)
        sys.session_list.append(sessi)
    else :
        raise ConstraintError('user and system instances required')

def del_session(session,sys):

    if isinstance(session,Session) and isinstance(sys,System):
        if session in self.session_list:
            sys.session_list.remove(session)
        else :
            raise ConstraintError('session expired')
    else :
        raise ConstraintError('Session and system instances required')

#+END_SRC



* Run Test Cases
 
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC



