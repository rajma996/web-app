#+TITLE: REST API
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


This document illustrates building of REST API

* REST


** Imports for src
#+BEGIN_SRC python :tangle ../../src/api.py :eval no

# -*- coding: utf-8 -*-

import os
import csv
import requests
from datetime import datetime
import inspect
from flask import session, render_template, Blueprint, request, jsonify, abort,\
    current_app, redirect, url_for
from config import *
from flask import current_app

from flask import Flask, redirect, url_for
from werkzeug import secure_filename

from db import *
from utils import parse_request, jsonify_list
api = Blueprint('APIs', __name__)

from db import sys
#+END_SRC

** Imports for tests
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no
# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

from src.db import sys

#+END_SRC
** Login/Logout apis
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route("/", methods=['GET'])
def index():
    if request.method == 'GET':
        if ('email' in session):
            return render_template("user-list.html")
        else:
            return render_template("login.html")


#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route("/auth/login", methods=['GET', 'POST'])
def login():

    if request.method == 'POST':
        email = str(request.form['email'])
        user_list = User.get_all()
        for i in range(0,len(user_list)):
            if str(email) == str(user_list[i].get_email()):
                current_app.logger.info("Successfully Logged in")
                session['email'] = email
                if user_list[i].get_role() == Role.get_by_id(1) :
                    session['role_name'] = str('admin')
                else :
                    session['role_name'] = str('user')

                return redirect("/")
        return render_template("login.html", message="Invalid email id")

#+END_SRC

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/auth/logout', methods=['GET'])
def logout_handler():
    session.pop('email', None)
    session.pop('role_name', None)
    return redirect("/")

#+END_SRC
** GET all users

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users', methods=['GET'])
def get_users():
    email =  request.headers.get('session')
    if sys.login_client(email) :
        try:
            print 'trying to get all users'
            result = sys.get_users_client(request.json['session'])
            print 'result'
        except:
            abort(503,'not logged in')
        else :
            return jsonify_list(result)


#+END_SRC
   

** GET all roles
   The is the REST API to get all the roles.

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles', methods=['GET'])
def get_roles():
    if 'session' not in request.json:
        print "throw error from get_roles"
    else:
        print "get_roles -- Check according to your specification"

    return jsonify_list([i.to_client() for i in Role.get_all()])
#+END_SRC


** GET a user with id

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>', methods=['GET'])
def get_user_by_id(id):
    record = User.get_by_id(id)
    if not record:
        abort(404, "No entry for %s with id: %s found." % ("user", id))

    return jsonify(record.to_client())
#+END_SRC


** GET a role with id

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles/<int:id>', methods=['GET'])
def get_role_by_id(id):
    record = Role.get_by_id(id)
    if not record:
        abort(404, "No entry for %s with id: %s found." % ("role", id))

    return jsonify(record.to_client())
#+END_SRC


** Create a user
   Usage:
   #+BEGIN_EXAMPLE
   POST request
   {
   "name": "Jimi hendrix",
   "email": "jimi@gmail.com",
   "role_id": 2,
   "session": "admin@vlabs.ac.in"
   }
   #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/api.py :eval no

# not implemented for session, implement with session
@api.route('/users', methods=['POST'])
def create_user():

    ### Check if there is a session and act according to the specification
    if not request.json or not 'name' in request.json or not 'email' in request.json:
        abort(400)
    else:
        name = request.json['name']
        email = request.json['email']
        role_id = request.json['role_id']
        session_email = request.json['session']

        try:
            user = User(name=Name(name),
                        email=Email(email),
                        role=Role.get_by_id(role_id))
            
            sys.add_users_client(user,request.json['session'])
            return jsonify(user.to_client())
        except Exception, e:
            current_app.logger.error("Error occured while inserting"
                                     "user record: %s" % str(e))
            abort(500, str(e))
#+END_SRC

** Update/Delete a user

   Usage:
   #+BEGIN_EXAMPLE
   PUT request
   {
   "name": "Jimi hendrix",
   "email": "jimi@gmail.com",
   "role_id": 1,
   "session": "admin@vlabs.ac.in"
   }
   #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>', methods=['PUT', 'DELETE'])
def update_delete_user(id):

    ### Check if there is a session and act according to the specification
    if 'session' not in request.json:
        abort(500,'session required')
    else:
        print "Check according to your specification"

    record = User.get_by_id(id)

    if not record:
        abort(404, 'No %s with id %s' % (user, id))

    if request.method == 'DELETE':

        try:
            sys.del_users_client(record,request.json['session'])
            return jsonify(id=id, status="success")
        except Exception, e:
            current_app.logger.error("Error occured while deleting"
                                     "user record %d: %s" % (id, str(e)))
            abort(500, str(e))

    if request.method == 'PUT':

        new_data = {}
        try:
            if 'name' in request.json:
                new_data['name'] = Name(request.json['name'])
            if 'email' in request.json:
                new_data['email'] = Email(request.json['email'])


            sys.update_user_client(record,request.json['name'],request.json['email'],request.json['session'])

            return jsonify(User.get_by_id(id).to_client())

        except Exception, e:
            current_app.logger.error("Error occured while updating"
                                     " user record %d: %s" % (id, str(e)))
            abort(500, str(e))

#+END_SRC


** Test API
*** User Tests
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no
from src.db import sys
class TestUser(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        sys.session_list = []
        db.drop_all()

    def test_get_all_users(self):
        print "test_get_all_users"
        global sys
        ###Create Users
        role1 = Role(name=Name("admin"))
        role1.save()
        role2 = Role(name=Name("user"))
        role2.save()
        user1 = User(name=Name("admin user"),
                    email=Email("admin@xyz.com"),
                    role=role1)
        user1.save()
        user2 = User(name=Name("normal user"),
                    email=Email("normal@xyz.com"),
                    role=role2)
        user2.save()

        login(user2,sys)
        login(user1,sys)

        headers = {'content-type': 'application/json'}

        payload = {'session': 'normal@xyz.com'}

        response = self.client.get("/users",
                                      data=json.dumps(payload),
                                      headers=headers)

        self.assertEqual(response.status_code, 200)


    def test_get_one_user(self):
        print "test_get_one_user"

        ### create a User
        role1 = Role(name=Name("admin"))
        role1.save()
        role2 = Role(name=Name("user"))
        role2.save()

        user1 = User(name=Name("admin user"),
                    email=Email("admin@xyz.com"),
                    role=role1)
        user1.save()
        user2 = User(name=Name("normal user"),
                    email=Email("normal@xyz.com"),
                    role=role2)
        user2.save()

        r = self.client.get('/users/1')
        result = json.loads(r.data)
        self.assertEqual(result['name'], "admin user")

    def test_update_existing_user(self):

        # Create a user
        # update the same user
        role1 = Role(name=Name("admin"))
        role1.save()
        role2 = Role(name=Name("user"))
        role2.save()

        user1 = User(name=Name("admin user"),
                     email=Email("admin@xyz.com"),
                     role=role1)

        user1.save()
        login(user1,sys)


        user2 = User(name=Name("normal user"),
                     email=Email("normal@xyz.com"),
                     role=role2)

        sys.add_users_client(user2,'admin@xyz.com')

        payload = {'email': 'ttt@kkk.com',
                   'name': 'nearly normal',
                   'role_id': 2,
                   'session': 'admin@xyz.com'}
        headers = {'content-type': 'application/json'}

        response = self.client.put("/users/2",
                                   data=json.dumps(payload),
                                   headers=headers)
        
        
        self.assertEqual(response.status_code, 200)

    def test_create_new_user(self):

        print "test_create_new_user"
        role1 = Role(name=Name("admin"))
        role1.save()
        role2 = Role(name=Name("user"))
        role2.save()

        user1 = User(name=Name("admin user"),
                     email=Email("admin@xyz.com"),
                     role=role1)
        user1.save()

        login(user1,sys)

        user2 = User(name=Name("normal user"),
                     email=Email("normal@xyz.com"),
                     role=role2)


        sys.add_users_client(user2,'admin@xyz.com')


        payload = {'email': 'ttt@kkk.com',
                   'name': 'nearly normal user',
                   'role_id': 2,
                   'session': 'admin@xyz.com'}

        headers = {'content-type': 'application/json'}

        response = self.client.post("/users",
                                    data=json.dumps(payload),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)

    def test_delete_user(self):
        return
        print "test_delete_user"
        role1 = Role(name=Name("admin"))
        role1.save()
        role2 = Role(name=Name("user"))
        role2.save()

        user1 = User(name=Name("admin user"),
                     email=Email("admin@xyz.com"),
                     role=role1)

        sys.add_users_client(user1,'admin@xyz.com')

        login(user1,sys)

        user2 = User(name=Name("normal user"),
                     email=Email("normal@xyz.com"),
                     role=role2)

        sys.add_users_client(user2,'admin@xyz.com')

        user3 = User(name=Name("normal userraj"),
                     email=Email("normal2@xyz.com"),
                     role=role2)

        sys.add_users_client(user3,'admin@xyz.com')


        payload = {'session': 'normal2@xyz.com'}

        headers = {'content-type': 'application/json'}

        response = self.client.delete("/users/2",
                                      data=json.dumps(payload),
                                      headers=headers)

        self.assertEqual(response.status_code, 500) # normal user cannot delete a user

        payload = {'session': 'admin@xyz.com'}

        response = self.client.delete("/users/2",
                                      data=json.dumps(payload),
                                      headers=headers)

        self.assertEqual(response.status_code, 200) # admin user can delete a user
#+END_SRC 


*** Run Tests
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

if __name__ == '__main__':
    unittest.main()
#+END_SRC
