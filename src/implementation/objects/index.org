#+title:  Object  Implementation of Mini Version of User Directory Application
#+AUTHOR: Raj Manvar
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../../org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Initialization
  
** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
# -*- coding: utf-8 -*-
from op_exceptions import AttributeRequired
from op_exceptions import ConstraintError
from utils import *
import copy
#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from datetime import datetime

from src.obj import *
from src.op_exceptions import AttributeRequired
from src.op_exceptions import ConstraintError

#+END_SRC


** Imports for utility functions

** Init Files
#+BEGIN_SRC python :tangle ../../src/__init__.py :eval no
import obj
#+END_SRC

#+BEGIN_SRC python :tangle ../../tests/__init__.py :eval no
print "tests package"
#+END_SRC



* Object Model

** Custom Exceptions
   These are some of the custom exceptions used in the application.

*** AttributeRequired

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)
#+END_SRC

*** ConstraintError
#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class ConstraintError(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)


#+END_SRC




** Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

*** is_role(value):
        

** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestName(TestCase):
    TESTING = True
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if is_email(value) :
           self.value = value
        else :
           raise TypeError('%s is not a Email!' % value)

    def __str__(self):
        return self.value
        
#+END_SRC

*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestEmail(TestCase):
    TESTING = True
    def test_email_type(self):
        print "test_email_type"
        new_email = Email("Johnw@gmail.com")
        # correct name
        self.assertEqual(new_email.value, "Johnw@gmail.com")
        # incorrect name
        self.assertRaises(TypeError, Email, "sdfsdfsdfsfsdf")
#+END_SRC


*** Functions
    
**** getemail
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email(self):
        return self.value

#+END_SRC



** User

*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role

       
***  Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class User():
    email = None
    name = None
    role = None
#+END_SRC


*** Constructor

**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=[<object of Role>, <object of Role> ...])
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, kwargs):
        if 'name' not in kwargs or 'email' not in kwargs or 'role' not in kwargs:
            raise AttributeError("argument should be a dict with keys name, email and role")

        elif not isinstance(kwargs['name'],Name)  :
            raise AttributeError("name key must have an instance of Name class")

        elif not isinstance(kwargs['email'],Email)  :
            raise AttributeError("email key must have an instance of Email class")

        elif not isinstance(kwargs['role'],Role)  :
            raise AttributeError("role key must have an instance of Role class")

        else :
            self.name = kwargs['name']
            self.email = kwargs['email']
            self.role = kwargs['role']
           
#+END_SRC


**** Test the constructor
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestUser(TestCase):
    TESTING = True
    
 
    def test_user_creation_without_role(self):
        temp = {'name': Name('john'), 'email': Email('john@gmail.com')}
        self.assertRaises(AttributeError,User, temp )

    def test_user_creation_with_role(self):
        temp = {'name': Name('john'), 'email': Email('john@gmail.com') , 'role': Role('admin') }
        inst = User(temp)
        self.assertEqual(inst.get_name(),'john')
        self.assertEqual(inst.get_email(),'john@gmail.com')
        self.assertEqual(inst.get_role(),'admin')



#+END_SRC



*** Functions
    
**** setEmail
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_email(self, email):
        if isinstance(email,Email):
            self.email = email
        else :
            raise TypeError('argument must be an istance of email class')

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_setemail(self):
        temp = {'name': Name('john'), 'email': Email('john@gmail.com') , 'role': Role('admin') }
        inst = User(temp)
        self.assertEqual(inst.get_email(),'john@gmail.com')
        inst.set_email(Email('john123@gmail.com'));
        self.assertEqual(inst.get_email(),'john123@gmail.com')
#+END_SRC
**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_name(self, name):
        if isinstance(name,Name):
            self.name = name;
        else :
            raise TypeError('argument must be an istance of Name class')
        
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_setname(self):
        temp = {'name': Name('john'), 'email': Email('john@gmail.com') , 'role': Role('admin') }
        inst = User(temp)
        self.assertEqual(inst.get_name(),'john')
        inst.set_name(Name('johnsnow'));
        self.assertEqual(inst.get_name(),'johnsnow')
#+END_SRC
**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, role):
        if isinstance(role,Role):
            self.role = role;
        else :
            raise TypeError('attribute must be an istance of Role class')

#+END_SRC
***** Test

**** getRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        return self.role.value
#+END_SRC
***** Test


**** getEmail
 #+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email(self):
        return self.email.value
 #+END_SRC

 
**** getName
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name(self):
        return self.name.value
#+END_SRC




**** toClient
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        pass
#        return {
#            'name': self.name,
#            'email': self.email,
#            'role': self.role.to_client()
#        }
#+END_SRC



** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Admin :: An admin is an user who can add, modify and delete other users
        except himself.
   - User :: A User is a user who can view all other users and can modify himself.


*** Mutable Data

     These are the data associated with Role type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Role():
    value = None
#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role("admin")
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, string):
        if is_role(string)==False:
            raise TypeError("Role can be admin or normal")
        else :
            self.value = string
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestRole(TestCase):
    TESTING = True
    def test_role_creation(self):
        print "test_role"
        new_name = Name("admin")
        # correct name
        self.assertEqual(new_name.value, "admin")
        # incorrect name
        self.assertRaises(TypeError, Role, "adminnormal")
#+END_SRC


*** Functions

**** setrole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, name):
        if is_role(name)==False :
            raise TypeError("role can be admin or normal")
        else :
            self.value = name
#+END_SRC

****** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_set_name(self):
        temp_role = Role('admin')
        self.assertEqual(temp_role.value,'admin')
        temp_role.set_role('normal')
        self.assertEqual(temp_role.value,'normal')
#+END_SRC


**** getrole

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        return self.value
#+END_SRC


**** getAll: Nil --> set[Role]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all():
#        return ('admin','normal')
        pass
#+END_SRC


***** Test getAll: Nil --> set[Role]
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_get_all(self):
        temp_role = Role('admin')
        #self.assertEqual(temp_role.get_all(),('admin','normal'))
 #+END_SRC


**** to_client
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        print "fill"
#+END_SRC



** Session

*** Introduction
    Session class essentially has the methods for addition, deletion and
    editing the user. It gives a session instance which will do all these
    things required. 
    User cannot be edited or deleted when he/she is logged in
    There has to be atleast one admin
    Also getting all the email and named for the phone book are added here
    Vaildations are taken care in User function.

*** Mutable Data

     These are the data associated with Role type, which are mutable

     + User
     + session_list


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Session():
    user = None
#+END_SRC


*** Constructor

    The signature of Session is defined as follows
    #+BEGIN_EXAMPLE
    sesssion_instance = session(user)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, user):
        if not isinstance(user,User):
            raise TypeError('only instnaces of user class can get session')
        self.user = user
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestSession(TestCase):
    TESTING = True
    

#+END_SRC


*** Functions


**** get_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_user(self):
            return self.user

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_addsession(self):
        print 'testing session:add session'
        temp = {'name': Name('john'), 'email': Email('john@gmail.com') , 'role': Role('admin') }
        inst = User(temp)
        sess = Session(inst)
        self.assertEqual(inst,sess.get_user())
#+END_SRC


** System

*** Introduction
    
    System class has all the system functions like get user, set user
    delete user.

    
*** Mutable Data

     These are the data associated with Role type, which are mutable
     


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class System():
    users = []
    session_list = []
#+END_SRC

*** Constructor

*** Test Constructor
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
sys = System()
class TestSystem(TestCase):

    TESTING = True
    
    def setUp(self):
        temp = {'name': Name('john'), 'email': Email('john@gmail.com') , 'role': Role('admin') }
        temp1 = {'name': Name('johnsnow'), 'email': Email('johnsnow@gmail.com') , 'role': Role('normal') }
        inst = User(temp)        
        sessi = Session(inst)
        inst1 = User(temp1)
        sessi1 = Session(inst1)
        global sys
        sys.users.append(inst)
        sys.session_list.append(sessi)
        sys.users.append(inst1)
        sys.session_list.append(sessi1)

    def tearDown(self):
        global sys
        sys.users = []
        sys.session_list = []

#+END_SRC


*** Functions

**** adduser
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
  
    def add_user(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if session.get_user().get_role()=='admin':
                if user.get_email() not in [self.users[i].get_email() for i in range(0,len(self.users))]:
                    self.users.append(user)
                    return True
                else :
                    raise ConstraintError ('User already exists')
                    return False
            else :
                raise ConstraintError ('User must be admin to add a new user')
                return False
        else:
            raise ConstraintError ('instances of user and session must be passed')            
            return False

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_adduser(self):
        print 'testing System: adduser'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        with self.assertRaises(ConstraintError): # trying to add same user
            sys.add_user(normal_logged[0].get_user(),admin_logged)
        with self.assertRaises(ConstraintError): # normal uesr trying to add user
            temp2 = {'name': Name('raj'), 'email': Email('raj@gmail.com') , 'role': Role('admin') }
            inst2 = User(temp2)
            sys.add_user(inst2,normal_logged[0])
        with self.assertRaises(ConstraintError): # proper instances not passed
            temp2 = {'name': Name('raj'), 'email': Email('raj@gmail.com') , 'role': Role('admin') }
            inst2 = User(temp2)
            sys.add_user(admin_logged[0],inst2)

        
#+END_SRC


**** showUsers
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
  
    def show_users(self,session):
        if isinstance(session,Session):
            if session in self.session_list :
                return copy.deepcopy(self.users)
            else :
                raise ConstraintError('Session not in session list')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_showusers(self):
        print 'testing System: show_users'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        a = sys.show_users(admin_logged[0])
        for i in range(0,len(a)):
            self.assertEqual(str(a[i].get_email()),str(sys.users[i].get_email()))
            self.assertEqual(str(a[i].get_name()),str(sys.users[i].get_name()))
            self.assertEqual(str(a[i].get_role()),str(sys.users[i].get_role()))


#+END_SRC


**** deluser
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no

    def del_user(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if session.get_user().get_role()=='admin' and user.get_role()!='admin' and session.get_user()!=user:
                 if user in self.users and session in self.session_list :
                    self.users.remove(user)
                 else :
                    raise ConstraintError('user not in list or session not present')
            else :
                raise ConstraintError('only admin can delete and admin cannot be removed')
        else:
            raise ConstraintError ('Instance of user and session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_deluser(self):
        print 'testing System: del_users'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        with self.assertRaises(ConstraintError): # normal user trying to delete user
            temp2 = {'name': Name('raj'), 'email': Email('raj@gmail.com') , 'role': Role('normal') }
            inst2 = User(temp2)
            sys.users.append(inst2)
            sys.del_user(inst2,normal_logged[0])
        with self.assertRaises(ConstraintError): # you cannot delete an admin
            temp3 = {'name': Name('raja'), 'email': Email('raja@gmail.com') , 'role': Role('admin') }
            inst3 = User(temp3)
            sys.users.append(inst3)
            sys.del_user(inst3,admin_logged[0])
        with self.assertRaises(ConstraintError): # cannot delete oneself
            sys.del_user(admin_logged[0].get_user(),admin_logged[0])

#+END_SRC


**** getuserbyemail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
 
    def getUserByEmail(self,email,session):
        if isinstance(session,Session) and isinstance(email,Email):
            if session in self.session_list:
                return [user for user in self.users if user.get_email()==email.get_email()]
            else :
                raise ConstraintError('session not valid')
        else:
            raise ConstraintError ('Instance of Email and session not passed')     

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_getuserbyemail(self):
        print 'testing System: get_user by email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        a = sys.getUserByEmail(Email('john@gmail.com'),admin_logged[0])
        self.assertEqual(a[0].get_name(),'john')
        self.assertEqual(len(a),1)
        self.assertEqual(a[0].get_email(),'john@gmail.com')

#+END_SRC


**** getEmail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no

    def get_email(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if user in self.users and session in self.session_list:
                return [u.get_email() for u in self.users if u==user][0]
            else :
                raise ConstraintError('user doesnot exists or invalid session')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_getemail(self):
        print 'testing System: get_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        a = sys.get_email(normal_logged[0].get_user(),admin_logged[0])
        self.assertEqual(a,'johnsnow@gmail.com')

#+END_SRC


**** getName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
 
    def get_name(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if user in self.users and session in self.session_list:
                return [u.get_name() for u in self.users if u==user][0]
            else :
                raise ConstraintError('user doesnot exists or invalid session')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_getname(self):
        print 'testing System: get_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        a = sys.get_name(normal_logged[0].get_user(),admin_logged[0])
        self.assertEqual(a,'johnsnow')

#+END_SRC


**** getrole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no

    def get_role(self,user,session):
        if isinstance(user,User) and isinstance(session,Session):
            if user in self.users and session in self.session_list:
                return [u.get_role() for u in self.users if u==user][0]
            else :
                raise ConstraintError('user doesnot exists or invalid session')
        else:
            raise ConstraintError ('Instance of session not passed')            

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_getemail(self):
        print 'testing System: get_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        a = sys.get_role(admin_logged[0].get_user(),admin_logged[0])
        self.assertEqual(a,'admin')

#+END_SRC


**** setEmail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no

    def set_email(self,user,email,session):
        if isinstance(user,User) and isinstance(session,Session) and isinstance(email,Email):
            if session.user.get_role()=='admin' or session.user==user:
               if user in self.users and session in self.session_list:
                   for i in range(0,len(self.users)):
                       if self.users[i] == user:
                           user.email = email
                           self.users[i] = user
               else :
                   raise ConstraintError('user not existing or session expired')
            else :
                raise ConstraintError('Only admin of same user can edit the email')
        else :
            raise ConstraintError ('Proper instances of user,email, session not passed')

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_setemail(self):
        print 'testing System: set_email'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        sys.set_email(normal_logged[0].get_user(),Email('johnraj@gmail.com'),admin_logged[0]) # admin changing
        self.assertEqual(normal_logged[0].get_user().get_email(),'johnraj@gmail.com')
        self.assertEqual(sys.getUserByEmail(Email('johnraj@gmail.com'),admin_logged[0])[0],normal_logged[0].get_user())
        sys.set_email(normal_logged[0].get_user(),Email('johnsnow@gmail.com'),admin_logged[0]) # user changing bakc
        self.assertEqual(normal_logged[0].get_user().get_email(),'johnsnow@gmail.com')
        self.assertEqual(sys.getUserByEmail(Email('johnsnow@gmail.com'),admin_logged[0])[0],normal_logged[0].get_user())


#+END_SRC


**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
 
    def set_name(self,user,name,session):
        if isinstance(user,User) and isinstance(session,Session) and isinstance(name,Name):
            if session.user.get_role()=='admin' or session.user==user:
               if user in self.users and session in self.session_list:
                   for i in range(0,len(self.users)):
                       if self.users[i] == user:
                           user.name = name
                           self.users[i] = user
               else :
                   raise ConstraintError('user not existing or session expired')
            else :
                raise ConstraintError('Only admin of same user can edit the email')
        else :
            raise ConstraintError ('Proper instances of user,email, session not passed')

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_setname(self):
        print 'testing System: set_name'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        sys.set_name(normal_logged[0].get_user(),Name('johnraj'),admin_logged[0]) # admin changing
        self.assertEqual(normal_logged[0].get_user().get_name(),'johnraj')
        sys.set_name(normal_logged[0].get_user(),Name('johnsnow'),normal_logged[0]) # user changing bakc
        self.assertEqual(normal_logged[0].get_user().get_name(),'johnsnow')

#+END_SRC


**** showsessions
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no

    def showSessions(self,session):
        if  isinstance(session,Session):
            if session in self.session_list:
               if session.get_user().get_role() == 'admin':
                   return self.session_list[:]
               else :
                   raise ConstraintError('only admin can get session list')
            else :
                raise ConstraintError('session expired')
        else :
            raise ConstraintError ('instance of session class has to be passed')

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_showsessions(self):
        print 'testing System: show session'
        global sys
        admin_logged = [s for s in sys.session_list if s.get_user().get_role()=='admin']
        normal_logged = [s for s in sys.session_list if s.get_user().get_role()=='normal']
        with self.assertRaises(ConstraintError):
            a = sys.showSessions(normal_logged[0])
        b = sys.showSessions(admin_logged[0])
        for i in range(0,len(b)):
            self.assertEqual(str(b[i].get_user().get_email()),str(sys.session_list[i].get_user().get_email()))
            self.assertEqual(str(b[i].get_user().get_name()),str(sys.session_list[i].get_user().get_name()))
            self.assertEqual(str(b[i].get_user().get_role()),str(sys.session_list[i].get_user().get_role()))

#+END_SRC


** Main
   
*** Construction

     the main class containing login and delete session

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
#+END_SRC




*** Functions
    
**** login
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
def login(user,sys):
    
    if isinstance(user,User) and isinstance(sys,System):
        sessi = Session(user)
        sys.session_list.append(sessi)
    else :
        raise ConstraintError('user and system instances required')

def del_session(session,sys):

    if isinstance(session,Session) and isinstance(sys,System):
        if session in self.session_list:
            sys.session_list.remove(session)
        else :
            raise ConstraintError('session expired')
    else :
        raise ConstraintError('Session and system instances required')

#+END_SRC



* Run Test Cases
 
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC



